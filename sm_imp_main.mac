// -*- coding: cp866 -*-

import vars, BankInter, CarryDoc, or_rep_h;

import rcw, fileop, rsexts;

import sm_imp_lib, sm_imp_log, sm_imp_payment, sm_imp_config, sm_imp_postdoc, sm_exception; 

/* Исходный текстовый файл */
file CurrentFile() txt 2048; 


class CLoader()

    var log: CImportLog;
    var config: CConfig;
    var logfile: String;
    var reportfile: String;
    var pmnt: CPayment; // текущий обрабатываемый платеж



    //Создаем исходящие директории 
    macro MakeOutCatalog(catalog_path)
        private var listFile = TDirList();

        listFile.List(catalog_path, "D");
        if(listFile.Count == 0)
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Создаем директорию " + catalog_path);
            MakeDir(catalog_path)
        end;
    end;

    macro Constructor()
        
        GetRegVal( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, this.logfile);
        GetRegVal( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, this.reportfile);
        this.logfile = this.logfile + "\\Import_Smarty_Payments.log";
        this.reportfile = this.reportfile + "\\imp_smarty_payments." + string(Random());
        this.log = CImportLog(logfile, reportfile);
        this.config = CConfig();

        this.MakeOutCatalog(DEST_FILE_PATH_OK);
        this.MakeOutCatalog(DEST_FILE_PATH_ERROR);

    onError(erObj)
        if (IsEqClass ("ConfigError", erObj.err))
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", erObj.err.msg, True);
        else
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", erObj.message, True);
        end;

        this.Destructor();
    end;

    // --- Деструктор ---
    macro Destructor()
        exit(1);
    end;

    macro OpenFile(full_source_filepath)
        if ( Open( CurrentFile, full_source_filepath ) )
            return True;
        else
            return False;
        end;
    end;

    macro Process()
        // Печатаем шапку отчета
        this.log.print_header();
  
        var listFile = TDirList();
        listFile.List(SOURCE_FILE_PATH + SOURCE_PATTERN_FILE, "F");

        if(listFile.Count == 0)
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "TXT файлы в директории " + SOURCE_FILE_PATH + " не обнаружены.", True);
            return ;
        end;

        InitProgress ( listFile.Count, "", "Обрабатываем платежи");

        var i = 0;
        while ( i < listFile.Count)
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Начали обработку файла " + listFile.Name(i));
            Message ("Начали обработку файла " + listFile.Name(i));

            this.ProcessFile(SOURCE_FILE_PATH + listFile.Name(i));
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Обработка файла " + listFile.Name(i) + " завершена");
            Message ("Обработка файла " + listFile.Name(i) + " завершена");

            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "--------------------------------------------------");
            i = i + 1;
            UseProgress(i);
        end;

        RemProgress();

        // Печатаем итоги
        this.log.print_total();

        // Печатаем подвал отчета
        this.log.print_footer();
    end;

    macro ProcessRow(full_source_filepath)
        this.pmnt = CPayment(CurrentFile);
        this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Разобрали платеж " + this.pmnt.to_str());

        //this.CreateDocuments();

        // печатаем платеж в отчет
        this.log.print_row(this.pmnt);

        this.pmnt = Null;
    end;

    macro ProcessFile(full_source_filepath)
        private var stat;
        if (this.OpenFile(full_source_filepath))

            // Начало таблицы
            this.log.print_table_header(full_source_filepath);
           
            SetDelim(SEPARATE); // установим разделитель
            while( Next(CurrentFile) )
                //debugbreak();
                stat = this.ProcessRow(full_source_filepath);
            end;
            // Низ таблицы
            this.log.print_table_footer();

            // закрываем в любом случае
            Close(CurrentFile);

            // в зависимости от результата копируем в нужные папки 
            if ( stat)
                // если все успешно, то скопируем файл в папку ОК
                this.MoveFile(DEST_FILE_PATH_OK, full_source_filepath)
            else
                // если все плохо, то скопируем файл в папку ERROR 
                this.MoveFile(DEST_FILE_PATH_ERROR, full_source_filepath) 
            end;
            
        else
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "Невозможно открыть файл " + full_source_filepath);
            this.log.print_error(full_source_filepath, "ERROR: Невозможно открыть файл");
        end;
    end;

    macro MoveFile(_dst, _source)
        private var namefile, extfile;
        SplitFile(_source, namefile, extfile);
        private var dst = _dst + "\\" + namefile + extfile;
        this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Копируем файл " + _source + " в папку " + dst);
        if (CopyFile(_source, dst))
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Успешно скопирован");
            if (RemoveFile(_source))
                this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Успешно удален");
            else
                this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "Ошибка при удалении файла " + _source);
            end;
        else
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "Ошибка при копировании файла " + _source);
        end;
    end;

    macro CreateDocuments()
        private var stat = False;
        private var factory = PostDocFactory(pmnt, this.config);
        private var point_code = this.pmnt.getPointCode();
        private var scheme_name;
        debugbreak();

        scheme_name = "SmartyPay";
        this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Схема проводок определена: " + scheme_name);
         
        this.pmnt.postdocs = factory.Create(scheme_name);
        // создаем документы в отложенных

        stat = ProcessConTrn(1, R2M(this, "InsertDocumentsInTRN"));
        if (not stat)
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "Ошибка при выполнении транзакции");
        else
            this.log.print_to_log(ModuleFileName(), CurrentLine(), "DEBUG", "Отложеные документы успешно созданы.");
        end;
        return stat;
    end;

    macro InsertDocumentsInTRN()
        var doc, errno;
        for(doc, this.pmnt.postdocs)
            errno = MakePostDoc(1, doc);
            if ( errno )
                this.log.print_to_log(ModuleFileName(), CurrentLine(), "ERROR", "Ошибка №" + errno + " при создании отложеного документа");
                AbortTrn();
            end;
        end;
    end;
    Constructor()
end;


var loader = CLoader();
loader.Process();
